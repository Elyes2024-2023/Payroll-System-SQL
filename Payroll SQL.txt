/*
* =====================================================
* ENTERPRISE RESOURCE MANAGEMENT SYSTEM (ERMS)
* =====================================================
* 
* Copyright (c) 2024-2025 ELYES. All rights reserved.
* 
* This SQL script implements a comprehensive enterprise resource management system
* focusing on organizational structure and personnel management.
* 
* Features:
* - Organizational unit management
* - Personnel tracking
* - Compensation management
* - Performance metrics
* - Advanced analytics
* 
* Author: ELYES
* Created: 2024
* Last Modified: 2025
* =====================================================
*/

-- Drop database if exists to ensure clean installation
DROP DATABASE IF EXISTS enterprise_management;

-- Initialize the enterprise database
CREATE DATABASE enterprise_management;

-- Set the active database
USE enterprise_management;

-- Create organizational units table with proper constraints
CREATE TABLE org_units (
    unit_id INT NOT NULL AUTO_INCREMENT,
    unit_name VARCHAR(50) NOT NULL UNIQUE,
    unit_location VARCHAR(50) NOT NULL,
    unit_type ENUM('Division', 'Department', 'Team') NOT NULL,
    unit_status ENUM('Active', 'Inactive', 'Restructuring') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (unit_id),
    INDEX idx_unit_status (unit_status),
    INDEX idx_unit_type (unit_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Create personnel records table with proper constraints
CREATE TABLE personnel (
    personnel_id INT NOT NULL AUTO_INCREMENT,
    full_name VARCHAR(50) NOT NULL,
    contact_email VARCHAR(100) UNIQUE NOT NULL,
    contact_number VARCHAR(15),
    base_compensation DECIMAL(10,2) NOT NULL DEFAULT 0,
    join_date DATE NOT NULL,
    unit_id INT,
    employment_status ENUM('Full-Time', 'Part-Time', 'Contract') DEFAULT 'Full-Time',
    performance_bonus DECIMAL(10,2) DEFAULT 600,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (personnel_id),
    FOREIGN KEY (unit_id) REFERENCES org_units(unit_id) ON DELETE SET NULL,
    INDEX idx_employment_status (employment_status),
    INDEX idx_join_date (join_date),
    CONSTRAINT chk_base_compensation CHECK (base_compensation >= 0),
    CONSTRAINT chk_performance_bonus CHECK (performance_bonus >= 0)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Create trigger to update unit status based on personnel count
DELIMITER //
CREATE TRIGGER update_unit_status
AFTER INSERT ON personnel
FOR EACH ROW
BEGIN
    IF NEW.unit_id IS NOT NULL THEN
        UPDATE org_units 
        SET unit_status = 'Active'
        WHERE unit_id = NEW.unit_id;
    END IF;
END //
DELIMITER ;

-- Populate organizational units with proper data
INSERT INTO org_units (unit_name, unit_location, unit_type) VALUES
    ('Global Operations', 'New York', 'Division'),
    ('Digital Marketing', 'Los Angeles', 'Department'),
    ('Financial Services', 'Chicago', 'Division');

-- Initialize personnel data with proper validation
INSERT INTO personnel (full_name, contact_email, contact_number, base_compensation, join_date, unit_id, employment_status) VALUES
    ('Sarah Anderson', 'sarah.anderson@enterprise.com', '123-456-7890', 5500.00, '2021-01-01', 1, 'Full-Time'),
    ('Marcus Chen', 'marcus.chen@enterprise.com', '234-567-8901', 6500.00, '2021-02-01', 2, 'Full-Time'),
    ('Priya Patel', 'priya.patel@enterprise.com', '345-678-9012', 7500.00, '2021-03-01', 3, 'Full-Time'),
    ('James Wilson', 'james.wilson@enterprise.com', NULL, 8500.00, '2021-04-01', NULL, 'Contract'),
    ('Emma Thompson', 'emma.thompson@enterprise.com', '456-789-0123', 9500.00, '2021-05-01', 1, 'Full-Time');

-- =====================================================
-- CORE QUERIES AND DATA ANALYSIS
-- =====================================================

-- Retrieve complete personnel records with proper formatting
SELECT 
    personnel_id,
    full_name,
    contact_email,
    contact_number,
    FORMAT(base_compensation, 2) as base_compensation,
    DATE_FORMAT(join_date, '%Y-%m-%d') as join_date,
    employment_status
FROM personnel;

-- Analyze compensation distribution with proper grouping
SELECT 
    CASE 
        WHEN base_compensation >= 9000 THEN 'Executive'
        WHEN base_compensation >= 7000 THEN 'Senior'
        WHEN base_compensation >= 5000 THEN 'Mid-Level'
        ELSE 'Entry Level'
    END as compensation_tier,
    COUNT(*) as employee_count,
    FORMAT(AVG(base_compensation), 2) as avg_compensation
FROM personnel
GROUP BY 
    CASE 
        WHEN base_compensation >= 9000 THEN 'Executive'
        WHEN base_compensation >= 7000 THEN 'Senior'
        WHEN base_compensation >= 5000 THEN 'Mid-Level'
        ELSE 'Entry Level'
    END
ORDER BY 
    CASE compensation_tier
        WHEN 'Executive' THEN 1
        WHEN 'Senior' THEN 2
        WHEN 'Mid-Level' THEN 3
        ELSE 4
    END;

-- =====================================================
-- DATA MANAGEMENT OPERATIONS
-- =====================================================

-- Enable data modifications with proper error handling
SET SQL_SAFE_UPDATES = 0;

-- Update compensation with proper validation
UPDATE personnel 
SET base_compensation = 6800 
WHERE full_name = 'Marcus Chen' 
AND base_compensation < 6800;

-- Remove inactive personnel with proper cleanup
DELETE FROM personnel 
WHERE full_name = 'James Wilson' 
AND employment_status = 'Contract';

-- =====================================================
-- ANALYTICAL QUERIES
-- =====================================================

-- Unit-wise compensation analysis with proper aggregation
SELECT 
    o.unit_name,
    o.unit_type,
    COUNT(p.personnel_id) as employee_count,
    FORMAT(AVG(p.base_compensation), 2) as avg_compensation,
    FORMAT(SUM(p.performance_bonus), 2) as total_bonus
FROM org_units o
LEFT JOIN personnel p ON o.unit_id = p.unit_id
GROUP BY o.unit_id, o.unit_name, o.unit_type
ORDER BY avg_compensation DESC;

-- =====================================================
-- AUTOMATED PROCEDURES
-- =====================================================

-- Enhanced personnel contact information formatter
DELIMITER //
CREATE PROCEDURE format_contact_info()
BEGIN
    SELECT 
        CONCAT(
            full_name, 
            ' (', 
            COALESCE(contact_email, 'No Email'), 
            CASE 
                WHEN contact_number IS NOT NULL 
                THEN CONCAT(' | ', contact_number)
                ELSE ''
            END,
            ')'
        ) AS formatted_contact,
        employment_status,
        FORMAT(base_compensation, 2) as compensation
    FROM personnel
    ORDER BY full_name;
END //
DELIMITER ;

-- Enhanced annual compensation calculator
DELIMITER //
CREATE PROCEDURE calculate_annual_compensation()
BEGIN
    SELECT 
        p.full_name,
        o.unit_name,
        o.unit_type,
        FORMAT(p.base_compensation, 2) as monthly_base,
        FORMAT(p.performance_bonus, 2) as monthly_bonus,
        FORMAT((p.base_compensation + p.performance_bonus) * 12, 2) as annual_package,
        p.employment_status
    FROM personnel p
    LEFT JOIN org_units o ON p.unit_id = o.unit_id
    ORDER BY (p.base_compensation + p.performance_bonus) * 12 DESC;
END //
DELIMITER ;

-- Enhanced compensation tier classifier
DELIMITER //
CREATE FUNCTION compensation_tier(personnel_id INT) 
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
    DECLARE tier VARCHAR(10);
    DECLARE total_comp DECIMAL(10,2);
    
    SELECT base_compensation + COALESCE(performance_bonus, 0)
    INTO total_comp
    FROM personnel 
    WHERE personnel_id = personnel_id;
    
    SET tier = CASE 
        WHEN total_comp >= 9000 THEN 'Executive'
        WHEN total_comp >= 7000 THEN 'Senior'
        WHEN total_comp >= 5000 THEN 'Mid-Level'
        ELSE 'Entry Level'
    END;
    
    RETURN tier;
END //
DELIMITER ;

-- Enhanced performance bonus adjustment procedure
DELIMITER //
CREATE PROCEDURE adjust_performance_bonus(
    IN p_unit_id INT, 
    IN adjustment_percentage DECIMAL(5,2),
    OUT affected_rows INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET affected_rows = -1;
    END;
    
    START TRANSACTION;
    
    UPDATE personnel 
    SET performance_bonus = performance_bonus + (performance_bonus * adjustment_percentage / 100)
    WHERE unit_id = p_unit_id;
    
    SET affected_rows = ROW_COUNT();
    
    COMMIT;
END //
DELIMITER ;

-- Create view for executive personnel with proper formatting
CREATE OR REPLACE VIEW executive_personnel AS 
SELECT 
    p.personnel_id,
    p.full_name,
    o.unit_name,
    FORMAT(p.base_compensation, 2) as base_compensation,
    FORMAT(p.performance_bonus, 2) as performance_bonus,
    FORMAT((p.base_compensation + p.performance_bonus) * 12, 2) as annual_package,
    p.employment_status
FROM personnel p
LEFT JOIN org_units o ON p.unit_id = o.unit_id
WHERE p.base_compensation >= 7500
ORDER BY p.base_compensation DESC;

-- Execute procedures and demonstrate functionality
CALL format_contact_info();
CALL calculate_annual_compensation();

-- Apply compensation tier classification
SELECT 
    p.personnel_id,
    p.full_name,
    compensation_tier(p.personnel_id) AS tier,
    FORMAT(p.base_compensation, 2) as compensation
FROM personnel p
ORDER BY p.base_compensation DESC;

-- Adjust performance bonuses with error handling
CALL adjust_performance_bonus(1, 12, @affected_rows);
SELECT @affected_rows as 'Rows Affected';

CALL adjust_performance_bonus(3, 15, @affected_rows);
SELECT @affected_rows as 'Rows Affected';

-- Review updated personnel records
SELECT * FROM executive_personnel;

/*
* =====================================================
* END OF ENTERPRISE RESOURCE MANAGEMENT SYSTEM
* =====================================================
* 
* For technical support or inquiries:
* Author: ELYES
* Email: [Your Email]
* 
* © 2024-2025 ELYES. All rights reserved.
* =====================================================
*/


